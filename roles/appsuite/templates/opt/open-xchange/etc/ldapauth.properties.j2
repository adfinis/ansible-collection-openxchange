{{ ansible_managed | comment }}

# This file contains the configuration for the ldap authentication.

# URL of the LDAP server to connect to for authenticating users.
# ldaps is supported.
java.naming.provider.url={{ appsuite_ldap_url }}

# Defines the authentication security that should be used.
java.naming.security.authentication={{ appsuite_ldap_authentication_type }}

# Timeouts are useful to get quick responses for login requests. This timeout is
# used if a new connection is established.
com.sun.jndi.ldap.connect.timeout={{ appsuite_ldap_connect_timeout }}

# This timeout only works since Java 6 SE to time out waiting for a response.
com.sun.jndi.ldap.read.timeout={{ appsuite_ldap_read_timeout }}

# Set to true to authenticate with the string entered in the login name field, e.g.
# "user@domain" instead of just "user" against ldap server.
useFullLoginInfo={{ appsuite_ldap_use_full_login_info | ternary('true', 'false') }}

# This attribute is used for login. E.g. uid=<login>,baseDN
# NOTE: if the attribute is not part of the user dn, you need to
#       set bindOnly=false
uidAttribute={{ appsuite_ldap_uid_attr }}

# This is the base distinguished name where the user are located.
baseDN={{ appsuite_ldap_basedn }}

# If you do not want to pass on the user id, used for authentication, to the
# groupware but another field entry of the LDAP user object, then you can
# specify the field here.
ldapReturnField={{ appsuite_ldap_return_field }}

# This option activates a special ADS bind. It allows the user to
# authenticate at the ADS with only the displayName or by using the syntax
# DOMAIN\Samaccountname.
# Note that "\" cannot be used in user names when this option is activated.
adsBind={{ appsuite_ldap_ads_bind | ternary('true', 'false') }}

# set bindonly to false if the user entries are not directly contained in the
# entry of the dn, and you have to search within ldap, change ldapScope
# in order to define the search depth.
# NOTE: When two users exist with the same uidAttribute, authentication
# will be refused, though.
bindOnly={{ appsuite_ldap_bindonly | ternary('true', 'false') }}

# set the ldap search scope in case bindOnly is set to false
# must be one of subtree, onelevel or base
ldapScope={{ appsuite_ldap_scope }}

# specify the filter to limit the search of user entries (used in combination with
# subtreeSearch=true.
# the filter will be ANDed with the attributed specified in uidAttribute.
# Example:
# (&(objectclass=posixAccount)(uid=foo))
searchFilter={{ appsuite_ldap_search_filter }}

# if your LDAP server does not allow to do searches without any authentication,
# specify a dn here to bind in order to search (used in combination with
# subtreeSearch=true).
bindDN={{ appsuite_ldap_bind_dn }}

# the password required for the bindDN
bindDNPassword={{ appsuite_ldap_bind_password }}

# This option configures how to handle the chasing of referrals in LDAP (see
# http://java.sun.com/products/jndi/tutorial/ldap/referral/overview.html).
# possible values: ignore, follow, throw
referral={{ appsuite_ldap_referral }}

# Comma separated list of login names allowed to login as a proxy for every
# other user.
#proxyUser=

# Define a delimiter to be used to seperate Proxy from Userlogin
# If defined, a proxy user can login on behalf of a user using the form
# <PROXYACCOUNT><DELIMITER><USERACCOUNT>
# NOTES:
#     1. the underlying Mailserver must support SASL AUTHPROXYING
#        The open-xchange mailfilterbundle does not support it, so it will
#        raise errors
#     2. the same option has to be set in mail.properties
#proxyDelimiter=
